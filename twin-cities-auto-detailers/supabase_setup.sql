-- Supabase Booking System Setup SQL

-- 1. Create the 'bookings' table
CREATE TABLE IF NOT EXISTS public.bookings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    phone text NOT NULL,
    vehicle_make text NOT NULL,
    vehicle_model text NOT NULL,
    vehicle_year integer NOT NULL,
    preferred_service text NOT NULL,
    preferred_date date NULL,
    preferred_time text NULL,
    message text NULL,
    status text DEFAULT 'pending' NOT NULL
);

-- Optional: Add comments to table and columns for clarity
COMMENT ON TABLE public.bookings IS 'Stores booking inquiries from customers.';
COMMENT ON COLUMN public.bookings.id IS 'Unique identifier for the booking.';
COMMENT ON COLUMN public.bookings.created_at IS 'Timestamp of when the booking was created.';
COMMENT ON COLUMN public.bookings.name IS 'Customer''s full name.';
COMMENT ON COLUMN public.bookings.email IS 'Customer''s email address.';
COMMENT ON COLUMN public.bookings.phone IS 'Customer''s phone number.';
COMMENT ON COLUMN public.bookings.vehicle_make IS 'Make of the customer''s vehicle.';
COMMENT ON COLUMN public.bookings.vehicle_model IS 'Model of the customer''s vehicle.';
COMMENT ON COLUMN public.bookings.vehicle_year IS 'Year of the customer''s vehicle.';
COMMENT ON COLUMN public.bookings.preferred_service IS 'The service the customer is interested in.';
COMMENT ON COLUMN public.bookings.preferred_date IS 'Customer''s preferred date for the service.';
COMMENT ON COLUMN public.bookings.preferred_time IS 'Customer''s preferred time for the service.';
COMMENT ON COLUMN public.bookings.message IS 'Any additional message or notes from the customer.';
COMMENT ON COLUMN public.bookings.status IS 'Status of the booking (e.g., pending, confirmed, completed, cancelled).';


-- 2. Enable Row Level Security (RLS) on the 'bookings' table
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies
-- IMPORTANT:
-- Your server-side actions in `lib/actions/booking.ts` should use a Supabase client
-- initialized with the SERVICE_ROLE_KEY if they are to bypass RLS for inserts/updates.
-- If your server-side client uses the ANON_KEY, you WILL need policies like the one below for inserts.

-- Example Policy: Allow public (anonymous or authenticated) users to insert bookings.
-- This is generally safe if your Next.js server action performs validation before inserting.
/*
CREATE POLICY "Allow public inserts for new bookings"
ON public.bookings
FOR INSERT
TO anon, authenticated
WITH CHECK (true);
*/

-- Example Policy: Allow admin users (you'll need a way to define 'is_admin()') to perform all operations.
-- Replace `is_admin()` with your actual admin check logic, e.g., checking a custom claim or another table.
/*
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
  -- Example: Check for a specific role claim set via custom JWT claims or a roles table
  -- RETURN (auth.jwt()->>'user_role' = 'admin');
  -- Or, if you have an 'admins' table with user_ids:
  -- RETURN EXISTS (SELECT 1 FROM admins WHERE user_id = auth.uid());
  RETURN false; -- Placeholder, implement your admin logic
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE POLICY "Admins can manage all bookings"
ON public.bookings
FOR ALL
USING (is_admin())
WITH CHECK (is_admin());
*/

-- Policy: Allow service_role to bypass RLS (implicitly handled by Supabase, but good to be aware)
-- No explicit policy needed if using service_role key on the server.

-- Grant usage on schema public to anon and authenticated roles if not already granted
-- (Often default, but good to ensure for RLS to function correctly with these roles)
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;

-- Grant necessary permissions on the bookings table to anon and authenticated roles
-- if you have policies that allow them to interact with the table.
-- For the "Allow public inserts for new bookings" policy example:
/*
GRANT INSERT ON TABLE public.bookings TO anon;
GRANT INSERT ON TABLE public.bookings TO authenticated;
*/

-- If you have sequences for ID generation (GENERATED BY DEFAULT AS IDENTITY handles this usually)
-- and are not using service_role for inserts, you might need to grant usage on them:
-- GRANT USAGE, SELECT ON SEQUENCE bookings_id_seq TO anon;
-- GRANT USAGE, SELECT ON SEQUENCE bookings_id_seq TO authenticated;


SELECT 'Supabase setup script for bookings table and RLS complete. Review and run in Supabase SQL Editor.'; 