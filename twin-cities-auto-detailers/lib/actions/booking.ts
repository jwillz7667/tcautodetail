"use server"

import * as z from "zod"
// import { Resend } from "resend" // Removed Resend import
import BookingInquiryEmail from "@/emails/booking-inquiry-admin"
import BookingInquiryUserEmail from "@/emails/booking-inquiry-user"
// import type { BookingInquiryData } from "../types/booking"
import { supabase } from "@/lib/supabaseClient"; // Corrected Supabase client import
import { inquirySchema, type BookingInquiryFormData } from "@/lib/schemas/bookingSchema"; // Import centralized schema

// const resend = new Resend(process.env.RESEND_API_KEY) // Removed Resend initialization
const adminEmail = process.env.ADMIN_EMAIL || "admin@example.com" // Keep for now, might be useful for Supabase
const fromEmail = process.env.FROM_EMAIL || "system@example.com" // Changed default and kept for now
const edgeFunctionUrl = "send-booking-email"; // Define the Edge Function URL/name

// const inquirySchema = z.object({ ... // <- REMOVE THIS OLD SCHEMA DEFINITION
// ... (entire old schema definition removed) ...
// preferredTime: z.string().optional(),
// message: z.string().optional(),
// })

export async function createBookingAction(data: BookingInquiryFormData): Promise<{
  success: boolean
  errors?: z.ZodIssue[] | { form?: string[]; email?: string }
}> {
  // console.log("Raw data received by createBookingAction:", data); // Removed for debugging
  const validationResult = inquirySchema.safeParse(data)

  if (!validationResult.success) {
    console.error("Server-side validation failed:", validationResult.error.flatten().fieldErrors)
    return { success: false, errors: validationResult.error.issues }
  }

  const validatedData = validationResult.data

  try {
    console.log("New Booking Inquiry (Supabase pending):", validatedData)

    // Email sending logic (Resend) commented out - to be replaced with Supabase
    /*
    await resend.emails.send({
      from: `Booking System <${fromEmail}>`,
      to: [adminEmail],
      subject: `New Booking Inquiry - ${validatedData.preferredService || "General Inquiry"}`,
      react: BookingInquiryEmail({ data: validatedData }) as React.ReactElement,
    })

    await resend.emails.send({
      from: `Twin Cities Auto Detailers <${fromEmail}>`,
      to: [validatedData.email],
      subject: "Your Auto Detailing Inquiry Received",
      react: BookingInquiryUserEmail({ name: validatedData.name }) as React.ReactElement,
    })
    */

    // Placeholder for Supabase database insertion
    // console.log("TODO: Implement Supabase database insertion here.")

    // Insert data into Supabase database
    const { data: bookingRecord, error: dbError } = await supabase
      .from("bookings") // Assuming your table is named 'bookings'
      .insert([{
        name: validatedData.name,
        email: validatedData.email,
        phone: validatedData.phone,
        vehicle_make: validatedData.vehicleMake,
        vehicle_model: validatedData.vehicleModel,
        vehicle_year: parseInt(validatedData.vehicleYear, 10), // Ensure year is an integer
        preferred_service: validatedData.preferredService,
        preferred_date: validatedData.preferredDate,
        preferred_time: validatedData.preferredTime,
        message: validatedData.message,
        // You might want to add a status field here, e.g., status: 'pending'
        // and timestamps like created_at: new Date().toISOString() if not auto-generated by Supabase
      }])
      .select() // Optionally, select the inserted record to confirm or use later
      .single(); // Assuming you expect a single record to be inserted

    if (dbError) {
      console.error("Error inserting booking into Supabase:", dbError);
      return { success: false, errors: { form: ["Failed to save your booking. Please try again later."] } };
    }

    console.log("Booking successfully inserted:", bookingRecord);


    // Send email to admin
    const { data: adminEmailResponse, error: adminEmailError } = await supabase.functions.invoke(edgeFunctionUrl, {
      body: {
        to: adminEmail,
        subject: `New Booking Inquiry - ${validatedData.preferredService || "General Inquiry"}`,
        // You'll need to decide how your Edge Function handles email content.
        // It could take raw HTML, a template ID, or structured data.
        // For now, let's assume it can take some structured data and a template identifier.
        emailType: "adminBookingInquiry",
        templateData: validatedData,
      }
    });

    if (adminEmailError) {
      console.error("Error sending admin email via Supabase:", adminEmailError);
      // Potentially return an error or handle it (e.g., log and continue)
      // For now, let's throw to indicate a critical failure if admin email fails.
      // throw new Error(`Failed to send admin notification: ${adminEmailError.message}`);
      // Or, more gracefully:
      return { success: false, errors: { email: "Failed to send admin notification. Please try again." } }; // Corrected error type
    }
    console.log("Admin email successfully invoked:", adminEmailResponse);


    // Send confirmation email to user
    const { data: userEmailResponse, error: userEmailError } = await supabase.functions.invoke(edgeFunctionUrl, {
      body: {
        to: validatedData.email,
        subject: "Your Auto Detailing Inquiry Received",
        emailType: "userBookingConfirmation",
        templateData: { name: validatedData.name }, // Only send necessary data
      }
    });

    if (userEmailError) {
      console.error("Error sending user confirmation email via Supabase:", userEmailError);
      // Handle error (e.g., log, but consider the booking successful if admin email sent)
      // Depending on requirements, this might not be a critical failure.
      // For now, let's log it and proceed, assuming admin notification is more critical.
      console.warn("User confirmation email failed to send:", userEmailError.message);
      // Optionally, you could add a non-critical error message to the response:
      // return { success: true, warnings: { email: ["Could not send your confirmation email, but your inquiry was received."] } };
    }
    console.log("User email successfully invoked:", userEmailResponse);


    return { success: true }
  } catch (error) {
    console.error("Error processing inquiry:", error)
    const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred."
    return { success: false, errors: { form: [errorMessage] } }
  }
}
